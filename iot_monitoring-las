// Include library untuk koneksi WiFi, MQTT, I2C, sensor, NTP time, dan JSON
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_ADXL345_U.h>
#include <Adafruit_HMC5883_U.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>

// Konfigurasi WiFi
const char* ssid = "@WIFI - USAKTI Out";
const char* password = "";

// Konfigurasi MQTT broker
const char* mqtt_server = "10.24.48.3";
const int mqtt_port = 1883;
const char* topic_publish = "sensor/data";
const char* topic_subscribe = "sensor/control";

WiFiClient espClient;
PubSubClient client(espClient);

// NTP Client
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "216.239.35.0", 7 * 3600, 60000);
bool hasValidTime = false;

// Sensor instances
Adafruit_ADXL345_Unified accel = Adafruit_ADXL345_Unified(12345);
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(54321);

// ITG3205 address
#define ITG3205_ADDR 0x68

// Variabel kontrol dari subscriber
bool kirimData = true;

// Fungsi callback subscriber
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Pesan masuk dari topic: ");
  Serial.println(topic);
  
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.print("Isi pesan: ");
  Serial.println(message);

  // Contoh kontrol: kirimData ON/OFF
  if (message == "ON") {
    kirimData = true;
    Serial.println("Data publish DIHIDUPKAN");
  } else if (message == "OFF") {
    kirimData = false;
    Serial.println("Data publish DIMATIKAN");
  }
}

// Fungsi koneksi MQTT
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client")) {
      Serial.println("connected.");
      // Subscribe ke topik kontrol setelah konek
      client.subscribe(topic_subscribe);
      Serial.println("Subscribed to sensor/control");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

// Fungsi baca gyro ITG3205
int16_t readWord(uint8_t reg) {
  Wire.beginTransmission(ITG3205_ADDR);
  Wire.write(reg);
  Wire.endTransmission(false);
  if (Wire.requestFrom(ITG3205_ADDR, 2) == 2) {
    int16_t val = Wire.read() << 8 | Wire.read();
    return val;
  } else {
    Serial.println("Failed to read gyro data.");
    return 0;
  }
}

void setup() {
  Serial.begin(115200);
  Wire.begin(4, 5);

  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);
  Serial.println("WiFi connected.");

  // MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback); // ← ini penting untuk handle pesan masuk

  // NTP
  timeClient.begin();
  timeClient.forceUpdate();

  if (!accel.begin()) while (1);
  if (!mag.begin()) while (1);

  Wire.beginTransmission(ITG3205_ADDR);
  Wire.write(0x3E);
  Wire.write(0x00);
  Wire.endTransmission();
}

void loop() {
  if (!client.connected()) reconnectMQTT();
  client.loop();  // Proses publish & subscriber

  static unsigned long lastSend = 0;
  unsigned long now = millis();

  // Kirim data tiap 1 detik kalau kirimData = true
  if (now - lastSend >= 1000 && kirimData) {
    lastSend = now;

    timeClient.update();
    unsigned long epochTime = timeClient.getEpochTime();
    if (epochTime < 1577836800) return;

    sensors_event_t accelEvent, magEvent;
    accel.getEvent(&accelEvent);
    mag.getEvent(&magEvent);

    int16_t gx = readWord(0x1D);
    int16_t gy = readWord(0x1F);
    int16_t gz = readWord(0x21);

    char timeStamp[30];
    unsigned long msPart = now % 1000;
    time_t rawTime = epochTime;
    struct tm timeinfo;
    localtime_r(&rawTime, &timeinfo);
    sprintf(timeStamp, "%04d-%02d-%02dT%02d:%02d:%02d.%03lu",
            timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday,
            timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, msPart);

    StaticJsonDocument<512> doc;
    doc["ax"] = accelEvent.acceleration.x;
    doc["ay"] = accelEvent.acceleration.y;
    doc["az"] = accelEvent.acceleration.z;
    doc["gx"] = gx;
    doc["gy"] = gy;
    doc["gz"] = gz;
    doc["mx"] = magEvent.magnetic.x;
    doc["my"] = magEvent.magnetic.y;
    doc["mz"] = magEvent.magnetic.z;
    doc["timestamp"] = timeStamp;

    String jsonStr;
    serializeJson(doc, jsonStr);
    client.publish(topic_publish, jsonStr.c_str());
    Serial.println("Sent: " + jsonStr);
  }
}
