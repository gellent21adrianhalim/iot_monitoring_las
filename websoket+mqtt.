#include <ESP8266WiFi.h>              // Library untuk koneksi WiFi pada ESP8266
#include <WebSocketsClient.h>         // Library untuk koneksi WebSocket client
#include <PubSubClient.h>             // Library untuk koneksi MQTT
#include <Wire.h>                     // Library komunikasi I2C
#include <Adafruit_Sensor.h>          // Library dasar sensor Adafruit
#include <Adafruit_ADXL345_U.h>       // Library sensor akselerometer ADXL345
#include <Adafruit_HMC5883_U.h>       // Library sensor magnetometer HMC5883L
#include <NTPClient.h>                // Library untuk sinkronisasi waktu via NTP
#include <WiFiUdp.h>                  // Library UDP untuk NTP
#include <ArduinoJson.h>              // Library untuk membuat dan menguraikan JSON

// WiFi Config
const char* ssid = "@WIFI - USAKTI Out"; // SSID WiFi
const char* password = "";               // Password WiFi (kosong)


// WebSocket Config
WebSocketsClient webSocket;              // Objek WebSocket
const char* ws_host = "10.24.60.11";     // IP server WebSocket
const uint16_t ws_port = 8000;           // Port server WebSocket
const char* ws_path = "/ws/data/";       // Path endpoint WebSocket


// MQTT Config
WiFiClient espClient;                    // Objek koneksi WiFi untuk MQTT
PubSubClient mqttClient(espClient);      // Objek MQTT client
const char* mqtt_server = "10.24.48.16"; // IP broker MQTT
const int mqtt_port = 1883;              // Port broker MQTT
const char* mqtt_topic = "sensor/data";  // Topik untuk kirim data sensor
const char* control_topic = "sensor/control"; // Topik untuk kontrol ON/OFF


// NTP Client
WiFiUDP ntpUDP;                          // Objek UDP untuk komunikasi NTP
NTPClient timeClient(ntpUDP, "pool.ntp.org", 7 * 3600, 60000); // NTP dengan offset GMT+7


// Sensor Config
Adafruit_ADXL345_Unified accel(12345);   // Objek sensor akselerometer ADXL345
Adafruit_HMC5883_Unified mag(54321);     // Objek sensor magnetometer HMC5883L
#define ITG3205_ADDR 0x68                // Alamat I2C sensor gyroscope ITG3205

bool sendData = false;                   // Flag untuk menentukan apakah data dikirim

// Event handler WebSocket
void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  if (type == WStype_CONNECTED)
    Serial.println("[WebSocket] Connected.");   // Jika WebSocket tersambung
  if (type == WStype_DISCONNECTED)
    Serial.println("[WebSocket] Disconnected."); // Jika WebSocket terputus
}

// Callback MQTT ketika ada pesan masuk
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (unsigned int i = 0; i < length; i++) message += (char)payload[i]; // Konversi payload ke string

  Serial.printf("[MQTT] Message on %s: %s\n", topic, message.c_str());

  // Kontrol berdasarkan isi pesan
  if (String(topic) == control_topic) {
    if (message == "ON") {
      sendData = true;                       // Aktifkan pengiriman data
      Serial.println(">> Data transmission STARTED.");
    } else if (message == "OFF") {
      sendData = false;                      // Nonaktifkan pengiriman data
      Serial.println(">> Data transmission STOPPED.");
    }
  }
}

// Fungsi membaca 2 byte dari register ITG3205
int16_t readWord(uint8_t reg) {
  Wire.beginTransmission(ITG3205_ADDR);
  Wire.write(reg);
  Wire.endTransmission(false);
  if (Wire.requestFrom(ITG3205_ADDR, 2) == 2)
    return (Wire.read() << 8) | Wire.read();   // Gabung 2 byte jadi int16_t
  else
    return 0;
}

// Fungsi untuk reconnect MQTT jika terputus
void reconnectMQTT() {
  while (!mqttClient.connected()) {
    Serial.print("Connecting to MQTT...");
    if (mqttClient.connect("ESP8266Client")) {
      Serial.println(" connected.");
      mqttClient.subscribe(control_topic); // Subscribe topik kontrol
      Serial.println("Subscribed to control topic.");
    } else {
      Serial.print(" failed, rc=");
      Serial.println(mqttClient.state());
      delay(2000);
    }
  }
}

// Fungsi setup dijalankan sekali saat ESP hidup
void setup() {
  Serial.begin(115200);              // Inisialisasi serial monitor
  Wire.begin(4, 5);                  // Inisialisasi I2C (SDA=GPIO4, SCL=GPIO5)

  WiFi.begin(ssid, password);        // Sambungkan ke WiFi
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nWiFi connected");

  timeClient.begin();                // Mulai NTP client
  timeClient.forceUpdate();          // Paksa update waktu pertama

  mqttClient.setServer(mqtt_server, mqtt_port);   // Atur server MQTT
  mqttClient.setCallback(mqttCallback);           // Atur callback MQTT

  webSocket.begin(ws_host, ws_port, ws_path);     // Mulai koneksi WebSocket
  webSocket.onEvent(webSocketEvent);              // Atur event handler WebSocket

  if (!accel.begin() || !mag.begin()) {           // Cek sensor terdeteksi
    Serial.println("Sensor not detected.");
    while (1);                                    // Berhenti jika gagal
  }

  // Inisialisasi ITG3205 (gyroscope)
  Wire.beginTransmission(ITG3205_ADDR);
  Wire.write(0x3E);                  // Register power management
  Wire.write(0x00);                  // Bangunkan sensor
  Wire.endTransmission();
}

// Fungsi loop berjalan terus menerus
void loop() {
  mqttClient.loop();                 // Jalankan loop MQTT
  webSocket.loop();                 // Jalankan loop WebSocket

  // Reconnect MQTT jika terputus
  if (!mqttClient.connected()) reconnectMQTT();

  // Reconnect WebSocket tiap 50ms jika terputus
  static unsigned long lastWsReconnect = 0;
  if (!webSocket.isConnected() && millis() - lastWsReconnect > 50) {
    Serial.println("[WebSocket] Reconnecting...");
    webSocket.begin(ws_host, ws_port, ws_path);
    lastWsReconnect = millis();
  }

  static unsigned long lastSend = 0;
  if (sendData && millis() - lastSend > 40) { // Kirim data tiap 40ms
    lastSend = millis();
    timeClient.update();                     // Update waktu
    unsigned long epochTime = timeClient.getEpochTime();

    // Baca data sensor akselerometer dan magnetometer
    sensors_event_t accelEvent, magEvent;
    accel.getEvent(&accelEvent);
    mag.getEvent(&magEvent);

    // Baca data gyroscope dari ITG3205
    int16_t gx = readWord(0x1D);
    int16_t gy = readWord(0x1F);
    int16_t gz = readWord(0x21);

    // Format timestamp ISO 8601 (YYYY-MM-DDTHH:MM:SS)
    char timeStamp[30];
    time_t rawTime = epochTime;
    struct tm timeinfo;
    localtime_r(&rawTime, &timeinfo);
    sprintf(timeStamp, "%04d-%02d-%02dT%02d:%02d:%02d",
            timeinfo.tm_year+1900, timeinfo.tm_mon+1, timeinfo.tm_mday,
            timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);

    // Buat JSON payload
    StaticJsonDocument<512> doc;
    doc["ax"] = accelEvent.acceleration.x;
    doc["ay"] = accelEvent.acceleration.y;
    doc["az"] = accelEvent.acceleration.z;
    doc["gx"] = gx;
    doc["gy"] = gy;
    doc["gz"] = gz;
    doc["mx"] = magEvent.magnetic.x;
    doc["my"] = magEvent.magnetic.y;
    doc["mz"] = magEvent.magnetic.z;
    doc["timestamp"] = timeStamp;

    String payload;
    serializeJson(doc, payload);    // Ubah JSON ke bentuk string

    bool sent = false;

    if (mqttClient.connected()) {
      mqttClient.publish(mqtt_topic, payload.c_str());  // Kirim data via MQTT
      Serial.println("[MQTT] Sent: " + payload);
      sent = true;
    }

    if (webSocket.isConnected()) {
      webSocket.sendTXT(payload);                         // Kirim data via WebSocket
      Serial.println("[WebSocket] Sent: " + payload);
      sent = true;
    }

    if (!sent)
      Serial.println("[SERIAL ONLY] " + payload);         // Jika tidak terkirim, tampilkan di Serial
  }
}
